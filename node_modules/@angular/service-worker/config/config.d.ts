/**
 * @license Angular v9.1.1
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */


/**
 * Configuration for a particular group of assets.
 *
 * @publicApi
 */
export declare interface AssetGroup {
    name: string;
    installMode?: 'prefetch' | 'lazy';
    updateMode?: 'prefetch' | 'lazy';
    resources: {
        files?: Glob[];
        urls?: Glob[];
    };
}

/**
 * A top-level Angular Service Worker configuration object.
 *
 * @publicApi
 */
export declare interface Config {
    appData?: {};
    index: string;
    assetGroups?: AssetGroup[];
    dataGroups?: DataGroup[];
    navigationUrls?: string[];
}

/**
 * Configuration for a particular group of dynamic URLs.
 *
 * @publicApi
 */
export declare interface DataGroup {
    name: string;
    urls: Glob[];
    version?: number;
    cacheConfig: {
        maxSize: number;
        maxAge: Duration;
        timeout?: Duration;
        strategy?: 'freshness' | 'performance';
    };
}

/**
 * @publicApi
 */
export declare type Duration = string;


/**
 * An abstraction over a virtual file system used to enable testing and operation
 * of the config generator in different environments.
 *
 * @publicApi
 */
export declare interface Filesystem {
    list(dir: string): Promise<string[]>;
    read(file: string): Promise<string>;
    hash(file: string): Promise<string>;
    write(file: string, contents: string): Promise<void>;
}

/**
 * Consumes service worker configuration files and processes them into control files.
 *
 * @publicApi
 */
export declare class Generator {
    readonly fs: Filesystem;
    private baseHref;
    constructor(fs: Filesystem, baseHref: string);
    process(config: Config): Promise<Object>;
    private processAssetGroups;
    private processDataGroups;
}


/**
 * @publicApi
 */
export declare type Glob = string;

export { }

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmQudHMiLCJzb3VyY2VzIjpbImNvbmZpZy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXIgdjkuMS4xXG4gKiAoYykgMjAxMC0yMDIwIEdvb2dsZSBMTEMuIGh0dHBzOi8vYW5ndWxhci5pby9cbiAqIExpY2Vuc2U6IE1JVFxuICovXG5cblxyXG4vKipcclxuICogQ29uZmlndXJhdGlvbiBmb3IgYSBwYXJ0aWN1bGFyIGdyb3VwIG9mIGFzc2V0cy5cclxuICpcclxuICogQHB1YmxpY0FwaVxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIEFzc2V0R3JvdXAge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgaW5zdGFsbE1vZGU/OiAncHJlZmV0Y2gnIHwgJ2xhenknO1xyXG4gICAgdXBkYXRlTW9kZT86ICdwcmVmZXRjaCcgfCAnbGF6eSc7XHJcbiAgICByZXNvdXJjZXM6IHtcclxuICAgICAgICBmaWxlcz86IEdsb2JbXTtcclxuICAgICAgICB1cmxzPzogR2xvYltdO1xyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgdG9wLWxldmVsIEFuZ3VsYXIgU2VydmljZSBXb3JrZXIgY29uZmlndXJhdGlvbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBDb25maWcge1xyXG4gICAgYXBwRGF0YT86IHt9O1xyXG4gICAgaW5kZXg6IHN0cmluZztcclxuICAgIGFzc2V0R3JvdXBzPzogQXNzZXRHcm91cFtdO1xyXG4gICAgZGF0YUdyb3Vwcz86IERhdGFHcm91cFtdO1xyXG4gICAgbmF2aWdhdGlvblVybHM/OiBzdHJpbmdbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb24gZm9yIGEgcGFydGljdWxhciBncm91cCBvZiBkeW5hbWljIFVSTHMuXHJcbiAqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEYXRhR3JvdXAge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgdXJsczogR2xvYltdO1xyXG4gICAgdmVyc2lvbj86IG51bWJlcjtcclxuICAgIGNhY2hlQ29uZmlnOiB7XHJcbiAgICAgICAgbWF4U2l6ZTogbnVtYmVyO1xyXG4gICAgICAgIG1heEFnZTogRHVyYXRpb247XHJcbiAgICAgICAgdGltZW91dD86IER1cmF0aW9uO1xyXG4gICAgICAgIHN0cmF0ZWd5PzogJ2ZyZXNobmVzcycgfCAncGVyZm9ybWFuY2UnO1xyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRHVyYXRpb24gPSBzdHJpbmc7XHJcblxyXG5cclxuLyoqXHJcbiAqIEFuIGFic3RyYWN0aW9uIG92ZXIgYSB2aXJ0dWFsIGZpbGUgc3lzdGVtIHVzZWQgdG8gZW5hYmxlIHRlc3RpbmcgYW5kIG9wZXJhdGlvblxyXG4gKiBvZiB0aGUgY29uZmlnIGdlbmVyYXRvciBpbiBkaWZmZXJlbnQgZW52aXJvbm1lbnRzLlxyXG4gKlxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRmlsZXN5c3RlbSB7XHJcbiAgICBsaXN0KGRpcjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT47XHJcbiAgICByZWFkKGZpbGU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPjtcclxuICAgIGhhc2goZmlsZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+O1xyXG4gICAgd3JpdGUoZmlsZTogc3RyaW5nLCBjb250ZW50czogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbnN1bWVzIHNlcnZpY2Ugd29ya2VyIGNvbmZpZ3VyYXRpb24gZmlsZXMgYW5kIHByb2Nlc3NlcyB0aGVtIGludG8gY29udHJvbCBmaWxlcy5cclxuICpcclxuICogQHB1YmxpY0FwaVxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR2VuZXJhdG9yIHtcclxuICAgIHJlYWRvbmx5IGZzOiBGaWxlc3lzdGVtO1xyXG4gICAgcHJpdmF0ZSBiYXNlSHJlZjtcclxuICAgIGNvbnN0cnVjdG9yKGZzOiBGaWxlc3lzdGVtLCBiYXNlSHJlZjogc3RyaW5nKTtcclxuICAgIHByb2Nlc3MoY29uZmlnOiBDb25maWcpOiBQcm9taXNlPE9iamVjdD47XHJcbiAgICBwcml2YXRlIHByb2Nlc3NBc3NldEdyb3VwcztcclxuICAgIHByaXZhdGUgcHJvY2Vzc0RhdGFHcm91cHM7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQHB1YmxpY0FwaVxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBHbG9iID0gc3RyaW5nO1xyXG5cclxuZXhwb3J0IHsgfVxyXG4iXX0=