{"version":3,"file":"service-worker.js","sources":["../../../../../../packages/service-worker/src/low_level.ts","../../../../../../packages/service-worker/src/push.ts","../../../../../../packages/service-worker/src/update.ts","../../../../../../packages/service-worker/src/module.ts","../../../../../../packages/service-worker/service-worker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ConnectableObservable, Observable, concat, defer, fromEvent, of , throwError} from 'rxjs';\nimport {filter, map, publish, switchMap, take, tap} from 'rxjs/operators';\n\nexport const ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n\n/**\n * An event emitted when a new version of the app is available.\n *\n * @publicApi\n */\nexport interface UpdateAvailableEvent {\n  type: 'UPDATE_AVAILABLE';\n  current: {hash: string, appData?: Object};\n  available: {hash: string, appData?: Object};\n}\n\n/**\n * An event emitted when a new version of the app has been downloaded and activated.\n *\n * @publicApi\n */\nexport interface UpdateActivatedEvent {\n  type: 'UPDATE_ACTIVATED';\n  previous?: {hash: string, appData?: Object};\n  current: {hash: string, appData?: Object};\n}\n\n/**\n * An event emitted when a `PushEvent` is received by the service worker.\n */\nexport interface PushEvent {\n  type: 'PUSH';\n  data: any;\n}\n\nexport type IncomingEvent = UpdateAvailableEvent | UpdateActivatedEvent;\n\nexport interface TypedEvent { type: string; }\n\ninterface StatusEvent {\n  type: 'STATUS';\n  nonce: number;\n  status: boolean;\n  error?: string;\n}\n\n\nfunction errorObservable(message: string): Observable<any> {\n  return defer(() => throwError(new Error(message)));\n}\n\n/**\n * @publicApi\n */\nexport class NgswCommChannel {\n  readonly worker: Observable<ServiceWorker>;\n\n  readonly registration: Observable<ServiceWorkerRegistration>;\n\n  readonly events: Observable<TypedEvent>;\n\n  constructor(private serviceWorker: ServiceWorkerContainer|undefined) {\n    if (!serviceWorker) {\n      this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n    } else {\n      const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n      const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n      const currentController = defer(() => of (serviceWorker.controller));\n      const controllerWithChanges = concat(currentController, controllerChanges);\n\n      this.worker = controllerWithChanges.pipe(filter((c): c is ServiceWorker => !!c));\n\n      this.registration = <Observable<ServiceWorkerRegistration>>(\n          this.worker.pipe(switchMap(() => serviceWorker.getRegistration())));\n\n      const rawEvents = fromEvent<MessageEvent>(serviceWorker, 'message');\n      const rawEventPayload = rawEvents.pipe(map(event => event.data));\n      const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n      const events = eventsUnconnected.pipe(publish()) as ConnectableObservable<IncomingEvent>;\n      events.connect();\n\n      this.events = events;\n    }\n  }\n\n  postMessage(action: string, payload: Object): Promise<void> {\n    return this.worker\n        .pipe(take(1), tap((sw: ServiceWorker) => {\n                sw.postMessage({\n                    action, ...payload,\n                });\n              }))\n        .toPromise()\n        .then(() => undefined);\n  }\n\n  postMessageWithStatus(type: string, payload: Object, nonce: number): Promise<void> {\n    const waitForStatus = this.waitForStatus(nonce);\n    const postMessage = this.postMessage(type, payload);\n    return Promise.all([waitForStatus, postMessage]).then(() => undefined);\n  }\n\n  generateNonce(): number { return Math.round(Math.random() * 10000000); }\n\n  eventsOfType<T extends TypedEvent>(type: T['type']): Observable<T> {\n    const filterFn = (event: TypedEvent): event is T => event.type === type;\n    return this.events.pipe(filter(filterFn));\n  }\n\n  nextEventOfType<T extends TypedEvent>(type: T['type']): Observable<T> {\n    return this.eventsOfType(type).pipe(take(1));\n  }\n\n  waitForStatus(nonce: number): Promise<void> {\n    return this.eventsOfType<StatusEvent>('STATUS')\n        .pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n                if (event.status) {\n                  return undefined;\n                }\n                throw new Error(event.error !);\n              }))\n        .toPromise();\n  }\n\n  get isEnabled(): boolean { return !!this.serviceWorker; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {NEVER, Observable, Subject, merge} from 'rxjs';\nimport {map, switchMap, take} from 'rxjs/operators';\n\nimport {ERR_SW_NOT_SUPPORTED, NgswCommChannel, PushEvent} from './low_level';\n\n\n/**\n * Subscribe and listen to\n * [Web Push Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n * through Angular Service Worker.\n *\n * @usageNotes\n *\n * You can inject a `SwPush` instance into any component or service\n * as a dependency.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\" header=\"app.component.ts\"></code-example>\n *\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\n * The call returns a `Promise` with a new\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n * instance.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\" header=\"app.component.ts\"></code-example>\n *\n * A request is rejected if the user denies permission, or if the browser\n * blocks or does not support the Push API or ServiceWorkers.\n * Check `SwPush.isEnabled` to confirm status.\n *\n * Invoke Push Notifications by pushing a message with the following payload.\n *\n * ```ts\n * {\n *   \"notification\": {\n *     \"actions\": NotificationAction[],\n *     \"badge\": USVString\n *     \"body\": DOMString,\n *     \"data\": any,\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\n *     \"icon\": USVString,\n *     \"image\": USVString,\n *     \"lang\": DOMString,\n *     \"renotify\": boolean,\n *     \"requireInteraction\": boolean,\n *     \"silent\": boolean,\n *     \"tag\": DOMString,\n *     \"timestamp\": DOMTimeStamp,\n *     \"title\": DOMString,\n *     \"vibrate\": number[]\n *   }\n * }\n * ```\n *\n * Only `title` is required. See `Notification`\n * [instance properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\n *\n * While the subscription is active, Service Worker listens for\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\n * occurrences and creates\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\n * instances in response.\n *\n * Unsubscribe using `SwPush.unsubscribe()`.\n *\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\n * clicks on a notification. For example:\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\" header=\"app.component.ts\"></code-example>\n *\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n *\n * @publicApi\n */\n@Injectable()\nexport class SwPush {\n  /**\n   * Emits the payloads of the received push notification messages.\n   */\n  readonly messages: Observable<object>;\n\n  /**\n   * Emits the payloads of the received push notification messages as well as the action the user\n   * interacted with. If no action was used the `action` property contains an empty string `''`.\n   *\n   * Note that the `notification` property does **not** contain a\n   * [Notification][Mozilla Notification] object but rather a\n   * [NotificationOptions](https://notifications.spec.whatwg.org/#dictdef-notificationoptions)\n   * object that also includes the `title` of the [Notification][Mozilla Notification] object.\n   *\n   * [Mozilla Notification]: https://developer.mozilla.org/en-US/docs/Web/API/Notification\n   */\n  readonly notificationClicks: Observable < {\n    action: string;\n    notification: NotificationOptions&{ title: string }\n  }\n  > ;\n\n  /**\n   * Emits the currently active\n   * [PushSubscription](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n   * associated to the Service Worker registration or `null` if there is no subscription.\n   */\n  readonly subscription: Observable<PushSubscription|null>;\n\n  /**\n   * True if the Service Worker is enabled (supported by the browser and enabled via\n   * `ServiceWorkerModule`).\n   */\n  get isEnabled(): boolean { return this.sw.isEnabled; }\n\n  // TODO(issue/24571): remove '!'.\n  private pushManager !: Observable<PushManager>;\n  private subscriptionChanges = new Subject<PushSubscription|null>();\n\n  constructor(private sw: NgswCommChannel) {\n    if (!sw.isEnabled) {\n      this.messages = NEVER;\n      this.notificationClicks = NEVER;\n      this.subscription = NEVER;\n      return;\n    }\n\n    this.messages = this.sw.eventsOfType<PushEvent>('PUSH').pipe(map(message => message.data));\n\n    this.notificationClicks =\n        this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map((message: any) => message.data));\n\n    this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n\n    const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n    this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n  }\n\n  /**\n   * Subscribes to Web Push Notifications,\n   * after requesting and receiving user permission.\n   *\n   * @param options An object containing the `serverPublicKey` string.\n   * @returns A Promise that resolves to the new subscription object.\n   */\n  requestSubscription(options: {serverPublicKey: string}): Promise<PushSubscription> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const pushOptions: PushSubscriptionOptionsInit = {userVisibleOnly: true};\n    let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n    let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n    for (let i = 0; i < key.length; i++) {\n      applicationServerKey[i] = key.charCodeAt(i);\n    }\n    pushOptions.applicationServerKey = applicationServerKey;\n\n    return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1))\n        .toPromise()\n        .then(sub => {\n          this.subscriptionChanges.next(sub);\n          return sub;\n        });\n  }\n\n  /**\n   * Unsubscribes from Service Worker push notifications.\n   *\n   * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\n   *          active subscription or the unsubscribe operation fails.\n   */\n  unsubscribe(): Promise<void> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n\n    const doUnsubscribe = (sub: PushSubscription | null) => {\n      if (sub === null) {\n        throw new Error('Not subscribed to push notifications.');\n      }\n\n      return sub.unsubscribe().then(success => {\n        if (!success) {\n          throw new Error('Unsubscribe failed!');\n        }\n\n        this.subscriptionChanges.next(null);\n      });\n    };\n\n    return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n  }\n\n  private decodeBase64(input: string): string { return atob(input); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {NEVER, Observable} from 'rxjs';\n\nimport {ERR_SW_NOT_SUPPORTED, NgswCommChannel, UpdateActivatedEvent, UpdateAvailableEvent} from './low_level';\n\n\n\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @publicApi\n */\n@Injectable()\nexport class SwUpdate {\n  /**\n   * Emits an `UpdateAvailableEvent` event whenever a new app version is available.\n   */\n  readonly available: Observable<UpdateAvailableEvent>;\n\n  /**\n   * Emits an `UpdateActivatedEvent` event whenever the app has been updated to a new version.\n   */\n  readonly activated: Observable<UpdateActivatedEvent>;\n\n  /**\n   * True if the Service Worker is enabled (supported by the browser and enabled via\n   * `ServiceWorkerModule`).\n   */\n  get isEnabled(): boolean { return this.sw.isEnabled; }\n\n  constructor(private sw: NgswCommChannel) {\n    if (!sw.isEnabled) {\n      this.available = NEVER;\n      this.activated = NEVER;\n      return;\n    }\n    this.available = this.sw.eventsOfType<UpdateAvailableEvent>('UPDATE_AVAILABLE');\n    this.activated = this.sw.eventsOfType<UpdateActivatedEvent>('UPDATE_ACTIVATED');\n  }\n\n  checkForUpdate(): Promise<void> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const statusNonce = this.sw.generateNonce();\n    return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', {statusNonce}, statusNonce);\n  }\n\n  activateUpdate(): Promise<void> {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n    const statusNonce = this.sw.generateNonce();\n    return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', {statusNonce}, statusNonce);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPlatformBrowser} from '@angular/common';\nimport {APP_INITIALIZER, ApplicationRef, InjectionToken, Injector, ModuleWithProviders, NgModule, PLATFORM_ID} from '@angular/core';\nimport {Observable, of } from 'rxjs';\nimport {delay, filter, take} from 'rxjs/operators';\n\nimport {NgswCommChannel} from './low_level';\nimport {SwPush} from './push';\nimport {SwUpdate} from './update';\n\n/**\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\n * `ServiceWorkerModule.register()`.\n *\n * You can use this token to define a provider that generates the registration options at runtime,\n * for example via a function call:\n *\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\n *     header=\"app.module.ts\"}\n *\n * @publicApi\n */\nexport abstract class SwRegistrationOptions {\n  /**\n   * Whether the ServiceWorker will be registered and the related services (such as `SwPush` and\n   * `SwUpdate`) will attempt to communicate and interact with it.\n   *\n   * Default: true\n   */\n  enabled?: boolean;\n\n  /**\n   * A URL that defines the ServiceWorker's registration scope; that is, what range of URLs it can\n   * control. It will be used when calling\n   * [ServiceWorkerContainer#register()](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register).\n   */\n  scope?: string;\n\n  /**\n   * Defines the ServiceWorker registration strategy, which determines when it will be registered\n   * with the browser.\n   *\n   * The default behavior of registering once the application stabilizes (i.e. as soon as there are\n   * no pending micro- and macro-tasks), is designed register the ServiceWorker as soon as possible\n   * but without affecting the application's first time load.\n   *\n   * Still, there might be cases where you want more control over when the ServiceWorker is\n   * registered (e.g. there might be a long-running timeout or polling interval, preventing the app\n   * to stabilize). The available option are:\n   *\n   * - `registerWhenStable`: Register as soon as the application stabilizes (no pending\n   *      micro-/macro-tasks).\n   * - `registerImmediately`: Register immediately.\n   * - `registerWithDelay:<timeout>`: Register with a delay of `<timeout>` milliseconds. For\n   *     example, use `registerWithDelay:5000` to register the ServiceWorker after 5 seconds. If\n   *     `<timeout>` is omitted, is defaults to `0`, which will register the ServiceWorker as soon\n   *     as possible but still asynchronously, once all pending micro-tasks are completed.\n   * - An [Observable](guide/observables) factory function: A function that returns an `Observable`.\n   *     The function will be used at runtime to obtain and subscribe to the `Observable` and the\n   *     ServiceWorker will be registered as soon as the first value is emitted.\n   *\n   * Default: 'registerWhenStable'\n   */\n  registrationStrategy?: string|(() => Observable<unknown>);\n}\n\nexport const SCRIPT = new InjectionToken<string>('NGSW_REGISTER_SCRIPT');\n\nexport function ngswAppInitializer(\n    injector: Injector, script: string, options: SwRegistrationOptions,\n    platformId: string): Function {\n  const initializer = () => {\n    if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n          options.enabled !== false)) {\n      return;\n    }\n\n    // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n    // becomes active. This allows the SW to initialize itself even if there is no application\n    // traffic.\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (navigator.serviceWorker.controller !== null) {\n        navigator.serviceWorker.controller.postMessage({action: 'INITIALIZE'});\n      }\n    });\n\n    let readyToRegister$: Observable<unknown>;\n\n    if (typeof options.registrationStrategy === 'function') {\n      readyToRegister$ = options.registrationStrategy();\n    } else {\n      const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable').split(':');\n      switch (strategy) {\n        case 'registerImmediately':\n          readyToRegister$ = of (null);\n          break;\n        case 'registerWithDelay':\n          readyToRegister$ = of (null).pipe(delay(+args[0] || 0));\n          break;\n        case 'registerWhenStable':\n          const appRef = injector.get<ApplicationRef>(ApplicationRef);\n          readyToRegister$ = appRef.isStable.pipe(filter(stable => stable));\n          break;\n        default:\n          // Unknown strategy.\n          throw new Error(\n              `Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n      }\n    }\n\n    // Don't return anything to avoid blocking the application until the SW is registered.\n    // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n    readyToRegister$.pipe(take(1)).subscribe(\n        () => navigator.serviceWorker.register(script, {scope: options.scope})\n                  .catch(err => console.error('Service worker registration failed with:', err)));\n  };\n  return initializer;\n}\n\nexport function ngswCommChannelFactory(\n    opts: SwRegistrationOptions, platformId: string): NgswCommChannel {\n  return new NgswCommChannel(\n      isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n                                                                undefined);\n}\n\n/**\n * @publicApi\n */\n@NgModule({\n  providers: [SwPush, SwUpdate],\n})\nexport class ServiceWorkerModule {\n  /**\n   * Register the given Angular Service Worker script.\n   *\n   * If `enabled` is set to `false` in the given options, the module will behave as if service\n   * workers are not supported by the browser, and the service worker will not be registered.\n   */\n  static register(script: string, opts: SwRegistrationOptions = {}):\n      ModuleWithProviders<ServiceWorkerModule> {\n    return {\n      ngModule: ServiceWorkerModule,\n      providers: [\n        {provide: SCRIPT, useValue: script},\n        {provide: SwRegistrationOptions, useValue: opts},\n        {\n          provide: NgswCommChannel,\n          useFactory: ngswCommChannelFactory,\n          deps: [SwRegistrationOptions, PLATFORM_ID]\n        },\n        {\n          provide: APP_INITIALIZER,\n          useFactory: ngswAppInitializer,\n          deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {NgswCommChannel as ɵangular_packages_service_worker_service_worker_a} from './src/low_level';\nexport {SCRIPT as ɵangular_packages_service_worker_service_worker_b,ngswAppInitializer as ɵangular_packages_service_worker_service_worker_c,ngswCommChannelFactory as ɵangular_packages_service_worker_service_worker_d} from './src/module';"]}